#!/usr/bin/env python3
import re
from Model import MLModel
from TestModel import TestModel

def build_model_name(model_type: str, column: str, query: str) -> str:
    # 1) model abbreviation
    abbrs = {
        'linear_regression': 'lr',
        'random_forest':     'rf',
        'xgboost':           'xgb',
        'neural_network':    'nn'
        #'mlp':               'nn',
        #'mlp_regressor':     'nn',
    }
    m_abbr = abbrs.get(model_type, model_type[:2])

    # 2) column part
    col_part = 'norm' if column == 'normalized_stats' else 'nonorm'

    # 3) sport
    m = re.search(r"sport\s*=\s*'([^']+)'", query, re.IGNORECASE)
    sport = m.group(1).upper() if m else 'ALL'

    # 4) suffix: “all” if only sport is in the WHERE clause, else slug of the rest
    where = query.split('WHERE',1)[1]
    # normalize whitespace & strip trailing ;
    cond = where.strip().rstrip(';').strip()
    # check if it’s exactly just the sport clause
    if re.fullmatch(rf"sport\s*=\s*'{sport}'", cond, re.IGNORECASE):
        suffix = 'all'
    else:
        # remove sport=... then slugify remaining
        rest = re.sub(rf"sport\s*=\s*'{sport}'\s*(AND\s*)?", '', cond, flags=re.IGNORECASE)
        # slugify: letters+digits and other things only, underscores
        suffix = re.sub(r'[^0-9A-Za-z<>=]+', '_', rest).strip('_').lower()

    return f"{m_abbr}_{col_part}_{sport}_{suffix}"

def main():
    """
    Train/test an MLB model.
    """

    # ── Feature definitions ────────────────────────────────
    num_feat = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 69, 70, 73, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 93, 101, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 120, 122, 123, 124, 129, 130, 131, 134, 136, 137, 138, 148, 149, 150, 151, 152, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 188, 189, 190, 192, 195, 199, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 218, 219, 220, 239, 240, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 260, 261, 262, 263, 269, 270, 271, 279, 280, 281, 284, 285, 286, 296, 297, 298, 312, 313, 314, 317, 325, 331, 333, 334, 335, 336, 339, 340, 341, 347, 349, 351, 352, 354, 355, 356, 358, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 431, 432, 433, 434, 442, 445, 446, 447, 448, 461, 463, 466, 467, 468, 469, 470, 482, 483, 484, 501, 502, 503, 504, 505, 513, 514, 515, 516, 517, 518, 519, 524, 550, 551, 552, 553, 559, 560, 561, 580, 581, 622, 623, 624, 636, 637, 638, 644, 666, 673, 681, 682, 685, 686, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 726, 727, 728, 729, 735, 748, 749, 755, 756, 757, 760, 761, 769, 771, 776, 778, 784, 788, 790, 791, 792, 809, 810, 811, 812, 813, 818, 819, 820, 825, 826, 827, 851, 852, 853, 854, 855, 869, 876, 879, 882, 883, 884, 904, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 945, 948, 949, 950, 967, 974, 975, 976, 979, 981, 982, 983, 987, 1014, 1016, 1017, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1050, 1051, 1052, 1055, 1056, 1057, 1060, 1061, 1062, 1095, 1102, 1103, 1104, 1105, 1114, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1130, 1131, 1132, 1133, 1134, 1137, 1138, 1139, 1140, 1141, 1144, 1145, 1146, 1147, 1148, 1151, 1152, 1153, 1154, 1155, 1158, 1159, 1160, 1161, 1162, 1165, 1166, 1167, 1168, 1169, 1172, 1173, 1174, 1175, 1176, 1183, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1196, 1197, 1198, 1203, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1225, 1226, 1227, 1230, 1231, 1232, 1233, 1234, 1238, 1239, 1240, 1241, 1244, 1245, 1246, 1247, 1248, 1258, 1259, 1260, 1261, 1262, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1281, 1282, 1283, 1294, 1298, 1299, 1300, 1302, 1309, 1312, 1313, 1314, 1315, 1316, 1319, 1320, 1321, 1322, 1323, 1328, 1329, 1330, 1349, 1350, 1352, 1353, 1354, 1357, 1358, 1359, 1360, 1361, 1362, 1365, 1366, 1367, 1370, 1372, 1373, 1379, 1380, 1381, 1389, 1390, 1391, 1394, 1395, 1396, 1406, 1407, 1408, 1421, 1422, 1423, 1424, 1427, 1435, 1441, 1443, 1444, 1445, 1446, 1449, 1450, 1451, 1457, 1459, 1461, 1463, 1464, 1465, 1466, 1468, 1485, 1486, 1487, 1488, 1489, 1492, 1493, 1494, 1495, 1496, 1499, 1500, 1501, 1502, 1503, 1506, 1507, 1508, 1509, 1510, 1513, 1514, 1515, 1516, 1517, 1520, 1521, 1522, 1523, 1524, 1527, 1528, 1529, 1530, 1531, 1534, 1535, 1536, 1537, 1538, 1541, 1542, 1543, 1544, 1545, 1552, 1555, 1556, 1557, 1558, 1571, 1573, 1576, 1577, 1578, 1579, 1580, 1592, 1593, 1594, 1611, 1612, 1613, 1614, 1615, 1623, 1625, 1626, 1627, 1628, 1629, 1634, 1660, 1661, 1662, 1663, 1664, 1669, 1670, 1671, 1689, 1690, 1691, 1696, 1732, 1733, 1734, 1746, 1747, 1748, 1754, 1776, 1783, 1791, 1792, 1795, 1796, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1836, 1837, 1838, 1839, 1845, 1858, 1859, 1865, 1866, 1867, 1870, 1871, 1879, 1881, 1886, 1888, 1894, 1898, 1899, 1900, 1901, 1902, 1917, 1919, 1920, 1921, 1922, 1923, 1927, 1928, 1929, 1930, 1935, 1936, 1937, 1961, 1962, 1963, 1964, 1965, 1979, 1986, 1989, 1992, 1993, 1994, 2014, 2025, 2026, 2027, 2028, 2029, 2030, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2041, 2042, 2058, 2059, 2060, 2077, 2084, 2085, 2086, 2090, 2091, 2092, 2093, 2096, 2124, 2125, 2126, 2127, 2143, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2155, 2156, 2157, 2160, 2161, 2162, 2165, 2166, 2167, 2170, 2171, 2172, 2177, 2212, 2213, 2214, 2215, 2224, 2225, 2226, 2228, 2230, 2231, 2232, 2233, 2237, 2238]

    cat_feat = [
        "team1_id", "team2_id", "venue_id", "season_type",
        "day", "month", "year", "day_of_week",
    ]

    # ── Model & data configuration ─────────────────────────
    MODEL_TYPE = "logistic_regression"          
    # Options include:
    # ['linear_regression', 'random_forest_regressor', 'xgboost_regressor',
    #  'mlp_regressor', 'knn_regressor', 'svr',
    #  'logistic_regression', 'knn_classifier', 'svc',
    #  'random_forest_classifier', 'xgboost_classifier',
    #  'mlp_classifier', 'gradient_boosting_classifier',
    #  'gaussian_nb', 'random_forest', 'xgboost',
    #  'mlp', 'neural_network', 'svm']

    COLUMN = "stats"  # 'stats' or 'normalized_stats'

    TRAIN_QUERY = (
        "SELECT * FROM games "
        "WHERE sport = 'MLB' AND DATE < '2024-12-10' "
        "ORDER BY date ASC;"
    )
    TEST_QUERY = (
        "SELECT * FROM games "
        "WHERE sport = 'MLB' AND DATE > '2024-12-10' "
        "ORDER BY date ASC;"
    )

    # Build a name like 'lr_norm_NBA_all' or
    # 'rf_nonorm_MLB_date_<_2025_05_26'
    MODEL_NAME = build_model_name(MODEL_TYPE, COLUMN, TRAIN_QUERY)

    # ── TRAIN ──────────────────────────────────────────────
    model = MLModel(
        MODEL_NAME,
        MODEL_TYPE,
        column=COLUMN,
        hyperparameter_tuning=False,
        tuning_n_iter=100,
        random_state=130,
        numerical_feature_indices=num_feat,
        categorical_feature_names=cat_feat,
        include_market_spread=True,
        include_market_total=True,
    )
    model.train(TRAIN_QUERY, TEST_QUERY)

if __name__ == "__main__":
    main()
