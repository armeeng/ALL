def main():
    """
    Train/test an MLB model.
    """

    # ── Feature definitions ────────────────────────────────
    num_feat = [884, 877, 967, 505, 791, 122, 1010, 398, 1017, 883, 100, 324, 776, 15, 895, 154, 685, 396, 876, 601, 349, 496, 613, 379, 205, 1066, 153, 94, 739, 211, 697, 1030, 29, 1081, 419, 413, 969, 452, 990, 1064, 431, 588, 241, 155, 584, 498, 345, 71, 209, 785, 701, 581, 979, 816, 813, 371, 31, 594, 873, 412, 437, 421, 404, 326, 10, 728, 375, 89, 485, 556, 203, 257, 23, 361, 631, 130, 999, 110, 34, 731, 101, 545, 267, 399, 8, 963, 630, 508, 1041, 497, 676, 780, 27, 934, 473, 952, 91, 142, 746, 237, 580, 6, 479, 687, 574, 140, 563, 289, 1029, 573, 773, 547, 356, 9, 255, 137, 636, 152, 948, 1004, 570, 30, 582, 604, 391, 372, 38, 587, 127, 537, 1005, 519, 874, 743, 930, 222, 213, 981, 487, 318, 603, 233, 882, 974, 50, 1009, 1079, 1031, 795, 811]

    cat_feat = [
    ]

    # ── Model & data configuration ─────────────────────────
    MODEL_TYPE = "logistic_regression"          
    # Options include:
    # ['linear_regression', 'random_forest_regressor', 'xgboost_regressor',
    #  'mlp_regressor', 'knn_regressor', 'svr',
    #  'logistic_regression', 'knn_classifier', 'svc',
    #  'random_forest_classifier', 'xgboost_classifier',
    #  'mlp_classifier', 'gradient_boosting_classifier',
    #  'gaussian_nb', 'random_forest', 'xgboost',
    #  'mlp', 'neural_network', 'svm']

    COLUMN = "stats"  # 'stats' or 'normalized_stats'

    TRAIN_QUERY = (
        "SELECT * FROM games "
        "WHERE sport = 'MLB' AND DATE < '2024-12-10' "
        "ORDER BY date ASC;"
    )
    TEST_QUERY = (
        "SELECT * FROM games "
        "WHERE sport = 'MLB' AND DATE > '2024-12-10' "
        "ORDER BY date ASC;"
    )

    # Build a name like 'lr_norm_NBA_all' or
    # 'rf_nonorm_MLB_date_<_2025_05_26'
    MODEL_NAME = build_model_name(MODEL_TYPE, COLUMN, TRAIN_QUERY)

    # ── TRAIN ──────────────────────────────────────────────
    model = MLModel(
        MODEL_NAME,
        MODEL_TYPE,
        column=COLUMN,
        hyperparameter_tuning=True,
        tuning_n_iter=100,
        random_state=130,
        numerical_feature_indices=num_feat,
        categorical_feature_names=cat_feat,
        include_market_spread=True,
        include_market_total=True,
        feature_engineering_mode='differential'
    )
    model.train(TRAIN_QUERY, TEST_QUERY)